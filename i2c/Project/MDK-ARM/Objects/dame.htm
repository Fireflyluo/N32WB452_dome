<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\dame.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\dame.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Oct 30 21:17:57 2025
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; I2C_Polling_Test &rArr; BSP_I2C_ScanDevices &rArr; BSP_I2C_Master_Transmit &rArr; BSP_I2C_Master_Transmit_DMA &rArr; I2C_CheckEvent
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from n32wb452_it.o(.text.BusFault_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[56]">DMA1_Channel8_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel6_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel7_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[57]">DMA2_Channel8_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[58]">DVP_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from n32wb452_it.o(.text.DebugMon_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from n32wb452_it.o(.text.HardFault_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[51]">I2C3_ER_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[50]">I2C3_EV_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[53]">I2C4_ER_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[52]">I2C4_EV_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5a]">MMU_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from n32wb452_it.o(.text.MemManage_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from n32wb452_it.o(.text.NMI_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[39]">RESERVE47_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3a]">RESERVE48_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[47]">RESERVE61_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[48]">RESERVE62_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[4d]">RESERVE67_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5c]">RESERVE82_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5d]">RESERVE83_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5e]">RESERVE84_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5f]">RSRAM_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[59]">SAC_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from n32wb452_it.o(.text.SVC_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from bsp_sys.o(.text.SysTick_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_n32wb452.o(.text.SystemInit) referenced from startup_n32wb452.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5b]">TSC_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[54]">UART6_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[55]">UART7_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from bsp_uart.o(.text.USART2_IRQHandler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_uart.o(.text.USART3_IRQHandler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from n32wb452_it.o(.text.UsageFault_Handler) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32wb452.o(.text) referenced from startup_n32wb452.o(RESET)
 <LI><a href="#[62]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32wb452.o(.text)
 <LI><a href="#[63]">fputc</a> from bsp_uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[60]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[64]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[75]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ca]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[cb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[cc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[cd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>RSRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Polling_Test
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>BSP_Delay</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_sys.o(.text.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>BSP_GPIO_Init</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, bsp_gpio.o(.text.BSP_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_GPIO_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>BSP_GPIO_TogglePin</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_gpio.o(.text.BSP_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_GPIO_TogglePin &rArr; GPIO_ReadOutputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>BSP_GPIO_WritePin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_gpio.o(.text.BSP_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_GPIO_WritePin &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>BSP_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_sys.o(.text.BSP_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[7f]"></a>BSP_I2C_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_i2c.o(.text.BSP_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BSP_I2C_Init &rArr; bsp_i2c_polingInit &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Polling_Test
</UL>

<P><STRONG><a name="[81]"></a>BSP_I2C_Master_Receive</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_I2C_Master_Receive &rArr; BSP_I2C_Master_Receive_DMA &rArr; BSP_I2C_Master_Transmit_Polling &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_IT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Polling_Test
</UL>

<P><STRONG><a name="[84]"></a>BSP_I2C_Master_Receive_DMA</STRONG> (Thumb, 576 bytes, Stack size 96 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_I2C_Master_Receive_DMA &rArr; BSP_I2C_Master_Transmit_Polling &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableDmaLastSend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigAck
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableDMA
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAddr7bit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive
</UL>

<P><STRONG><a name="[83]"></a>BSP_I2C_Master_Receive_IT</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_I2C_Master_Receive_IT &rArr; I2C_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigInt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive
</UL>

<P><STRONG><a name="[82]"></a>BSP_I2C_Master_Receive_Polling</STRONG> (Thumb, 1154 bytes, Stack size 40 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Receive_Polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_I2C_Master_Receive_Polling &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigAck
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAddr7bit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTimeOut_CallBack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive
</UL>

<P><STRONG><a name="[98]"></a>BSP_I2C_Master_Transmit</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_I2C_Master_Transmit &rArr; BSP_I2C_Master_Transmit_DMA &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_IT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_ScanDevices
</UL>

<P><STRONG><a name="[9a]"></a>BSP_I2C_Master_Transmit_DMA</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_I2C_Master_Transmit_DMA &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableDMA
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAddr7bit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[99]"></a>BSP_I2C_Master_Transmit_IT</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_I2C_Master_Transmit_IT &rArr; I2C_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigInt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[85]"></a>BSP_I2C_Master_Transmit_Polling</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, bsp_i2c.o(.text.BSP_I2C_Master_Transmit_Polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_I2C_Master_Transmit_Polling &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAddr7bit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommTimeOut_CallBack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[9b]"></a>BSP_I2C_ScanDevices</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, bsp_i2c.o(.text.BSP_I2C_ScanDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_I2C_ScanDevices &rArr; BSP_I2C_Master_Transmit &rArr; BSP_I2C_Master_Transmit_DMA &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Polling_Test
</UL>

<P><STRONG><a name="[9d]"></a>BSP_SysTick_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bsp_sys.o(.text.BSP_SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SysTick_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>BSP_UART_Init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, bsp_uart.o(.text.BSP_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = BSP_UART_Init &rArr; bsp_uart_InterruptInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_state
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>BSP_Uart_Transmit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, bsp_uart.o(.text.BSP_Uart_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Uart_Transmit &rArr; USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32wb452_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CommTimeOut_CallBack</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_i2c.o(.text.CommTimeOut_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommTimeOut_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[87]"></a>DMA_DeInit</STRONG> (Thumb, 580 bytes, Stack size 4 bytes, n32wb452_dma.o(.text.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
</UL>

<P><STRONG><a name="[91]"></a>DMA_EnableChannel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32wb452_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
</UL>

<P><STRONG><a name="[93]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, n32wb452_dma.o(.text.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
</UL>

<P><STRONG><a name="[89]"></a>DMA_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, n32wb452_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
</UL>

<P><STRONG><a name="[88]"></a>DMA_StructInit</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, n32wb452_dma.o(.text.DMA_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32wb452_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>GPIO_ConfigPinRemap</STRONG> (Thumb, 986 bytes, Stack size 28 bytes, n32wb452_gpio.o(.text.GPIO_ConfigPinRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_ConfigPinRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, n32wb452_gpio.o(.text.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_InitStruct</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, n32wb452_gpio.o(.text.GPIO_InitStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_InitStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32wb452_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_TogglePin
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_ResetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32wb452_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_WriteBit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_gpio.o(.text.GPIO_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_WritePin
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32wb452_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>I2C_CheckEvent</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, n32wb452_i2c.o(.text.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[8d]"></a>I2C_ConfigAck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_ConfigAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ConfigAck
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
</UL>

<P><STRONG><a name="[94]"></a>I2C_ConfigInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_IT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_IT
</UL>

<P><STRONG><a name="[ac]"></a>I2C_DeInit</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, n32wb452_i2c.o(.text.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_DeInit &rArr; RCC_EnableAPB2PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
</UL>

<P><STRONG><a name="[96]"></a>I2C_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
</UL>

<P><STRONG><a name="[92]"></a>I2C_EnableDMA</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_EnableDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_EnableDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
</UL>

<P><STRONG><a name="[90]"></a>I2C_EnableDmaLastSend</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_EnableDmaLastSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_EnableDmaLastSend
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
</UL>

<P><STRONG><a name="[8a]"></a>I2C_GenerateStart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_GenerateStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GenerateStart
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_IT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_IT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[8e]"></a>I2C_GenerateStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_GenerateStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GenerateStop
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[86]"></a>I2C_GetFlag</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, n32wb452_i2c.o(.text.I2C_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[af]"></a>I2C_Init</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, n32wb452_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
</UL>

<P><STRONG><a name="[ba]"></a>I2C_InitStruct</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, n32wb452_i2c.o(.text.I2C_InitStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_InitStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
</UL>

<P><STRONG><a name="[b1]"></a>I2C_Polling_Test</STRONG> (Thumb, 122 bytes, Stack size 152 bytes, main.o(.text.I2C_Polling_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = I2C_Polling_Test &rArr; BSP_I2C_ScanDevices &rArr; BSP_I2C_Master_Transmit &rArr; BSP_I2C_Master_Transmit_DMA &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_ScanDevices
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>I2C_RecvData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32wb452_i2c.o(.text.I2C_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
</UL>

<P><STRONG><a name="[8c]"></a>I2C_SendAddr7bit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_SendAddr7bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SendAddr7bit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_DMA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[97]"></a>I2C_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32wb452_i2c.o(.text.I2C_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Receive_Polling
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Master_Transmit_Polling
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32wb452_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32wb452_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>NVIC_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
</UL>

<P><STRONG><a name="[bb]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
</UL>

<P><STRONG><a name="[b2]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_rcc.o(.text.RCC_ConfigSysclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigSysclk
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b8]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32wb452_rcc.o(.text.RCC_EnableAPB1PeriphClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
</UL>

<P><STRONG><a name="[ad]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32wb452_rcc.o(.text.RCC_EnableAPB1PeriphReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[79]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32wb452_rcc.o(.text.RCC_EnableAPB2PeriphClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_polingInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[ae]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32wb452_rcc.o(.text.RCC_EnableAPB2PeriphReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[b0]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 452 bytes, Stack size 28 bytes, n32wb452_rcc.o(.text.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[b3]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32wb452_rcc.o(.text.RCC_GetSysclkSrc))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32wb452_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_sys.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, system_n32wb452.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVDDDBKTrim
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_uart.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_IRQHandler &rArr; BSP_UART_IRQHandler &rArr; bsp_uart_error &rArr; USART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_uart.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART3_IRQHandler &rArr; BSP_UART_IRQHandler &rArr; bsp_uart_error &rArr; USART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>USART_ClrFlag</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, n32wb452_usart.o(.text.USART_ClrFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>USART_ConfigInt</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, n32wb452_usart.o(.text.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
</UL>

<P><STRONG><a name="[b6]"></a>USART_DeInit</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, n32wb452_usart.o(.text.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_DeInit &rArr; RCC_EnableAPB2PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
</UL>

<P><STRONG><a name="[bf]"></a>USART_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32wb452_usart.o(.text.USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
</UL>

<P><STRONG><a name="[a6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, n32wb452_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Transmit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_error
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>USART_GetIntStatus</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, n32wb452_usart.o(.text.USART_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>USART_Init</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, n32wb452_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
</UL>

<P><STRONG><a name="[a5]"></a>USART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, n32wb452_usart.o(.text.USART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>USART_SendData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32wb452_usart.o(.text.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Transmit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>USART_StructInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, n32wb452_usart.o(.text.USART_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_InterruptInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_polingInit
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32wb452_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputc &rArr; BSP_Uart_Transmit &rArr; USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Uart_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[60]"></a>main</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; I2C_Polling_Test &rArr; BSP_I2C_ScanDevices &rArr; BSP_I2C_Master_Transmit &rArr; BSP_I2C_Master_Transmit_DMA &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_TogglePin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Polling_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[da]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_ScanDevices
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Polling_Test
</UL>

<P><STRONG><a name="[db]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[dc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[dd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>bsp_i2c_polingInit</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, bsp_i2c.o(.text.bsp_i2c_polingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsp_i2c_polingInit &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitStruct
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_Init
</UL>

<P><STRONG><a name="[a0]"></a>get_uart_state</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_uart.o(.text.get_uart_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_uart_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_error
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[a9]"></a>bsp_uart_polingInit</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, bsp_uart.o(.text.bsp_uart_polingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bsp_uart_polingInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinRemap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>bsp_uart_InterruptInit</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, bsp_uart.o(.text.bsp_uart_InterruptInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = bsp_uart_InterruptInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinRemap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[9f]"></a>BSP_UART_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, bsp_uart.o(.text.BSP_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_UART_IRQHandler &rArr; bsp_uart_error &rArr; USART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrFlag
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_error
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_state
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>bsp_uart_error</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, bsp_uart.o(.text.bsp_uart_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_uart_error &rArr; USART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_sys.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
</UL>

<P><STRONG><a name="[b4]"></a>SetSysClock</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, system_n32wb452.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>SetVDDDBKTrim</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, system_n32wb452.o(.text.SetVDDDBKTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetVDDDBKTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[39]"></a>RESERVE47_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RESERVE48_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RESERVE61_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RESERVE62_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RESERVE67_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RESERVE82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RESERVE83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RESERVE84_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32wb452.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32wb452.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[c6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
